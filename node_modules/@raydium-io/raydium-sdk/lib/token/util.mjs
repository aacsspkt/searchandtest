import{PublicKey as H}from"@solana/web3.js";import{PublicKey as x,SystemProgram as U}from"@solana/web3.js";import{PublicKey as w}from"@solana/web3.js";var y="1.1.0-beta.1";import"@colors/colors";var R=!1,T=!1,m={debug:1,default:2,info:2,warning:3,error:4,off:5},N={},E;function S(){try{let i=[];if(["NFD","NFC","NFKD","NFKC"].forEach(r=>{try{if("test".normalize(r)!=="test")throw new Error("bad normalize")}catch{i.push(r)}}),i.length)throw new Error("missing "+i.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(i){if(i instanceof Error)return i.message}return""}var d=S(),A=(l=>(l.DEBUG="DEBUG",l.INFO="INFO",l.WARNING="WARNING",l.ERROR="ERROR",l.OFF="OFF",l))(A||{}),I=(s=>(s.UNKNOWN_ERROR="UNKNOWN_ERROR",s.NOT_IMPLEMENTED="NOT_IMPLEMENTED",s.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",s.NETWORK_ERROR="NETWORK_ERROR",s.RPC_ERROR="RPC_ERROR",s.TIMEOUT="TIMEOUT",s.BUFFER_OVERRUN="BUFFER_OVERRUN",s.NUMERIC_FAULT="NUMERIC_FAULT",s.MISSING_NEW="MISSING_NEW",s.INVALID_ARGUMENT="INVALID_ARGUMENT",s.MISSING_ARGUMENT="MISSING_ARGUMENT",s.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",s.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",s))(I||{}),b="0123456789abcdef";function O(i,r=!1){let t=i;try{if(i instanceof Uint8Array){let e="";for(let n=0;n<i.length;n++)e+=b[i[n]>>4],e+=b[i[n]&15];t=`Uint8Array(0x${e})`}else if(i instanceof w)t=`PublicKey(${i.toBase58()})`;else if(i instanceof Object&&!r){let e={};Object.entries(i).forEach(([n,l])=>{e[n]=O(l,!0)}),t=JSON.stringify(e)}else r||(t=JSON.stringify(i))}catch{t=JSON.stringify(i.toString())}return t}var o=class{constructor(r){this.version=y;this.moduleName=r}_log(r,t){let e=r.toLowerCase();m[e]==null&&this.throwArgumentError("invalid log level name","logLevel",r),!((N[this.moduleName]||m.default)>m[e])&&console.log(...t)}debug(...r){this._log(o.levels.DEBUG,["[DEBUG]".blue,...r])}info(...r){this._log(o.levels.INFO,["[INFO]".green,...r])}warn(...r){this._log(o.levels.WARNING,["[WARN]".yellow,...r])}makeError(r,t,e){if(T)return this.makeError("censored error",t,{});t||(t=o.errors.UNKNOWN_ERROR),e||(e={});let n=[];Object.entries(e).forEach(([g,h])=>{n.push(`${g}=${O(h)})`)}),n.push(`code=${t}`),n.push(`module=${this.moduleName}`),n.push(`version=${this.version}`);let l=r;n.length&&(r+=" ("+n.join(", ")+")");let f=new Error(r);return f.reason=l,f.code=t,Object.entries(e).forEach(([g,h])=>{f[g]=h}),f}throwError(r,t,e){throw this.makeError(r,t,e)}throwArgumentError(r,t,e){return this.throwError(r,o.errors.INVALID_ARGUMENT,{argument:t,value:e})}assert(r,t,e,n){r||this.throwError(t,e,n)}assertArgument(r,t,e,n){r||this.throwArgumentError(t,e,n)}checkNormalize(r){r==null&&(r="platform missing String.prototype.normalize"),d&&this.throwError("platform missing String.prototype.normalize",o.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:d})}checkSafeUint53(r,t){typeof r=="number"&&(t==null&&(t="value not safe"),(r<0||r>=9007199254740991)&&this.throwError(t,o.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:r}),r%1&&this.throwError(t,o.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:r}))}checkArgumentCount(r,t,e){e?e=": "+e:e="",r<t&&this.throwError("missing argument"+e,o.errors.MISSING_ARGUMENT,{count:r,expectedCount:t}),r>t&&this.throwError("too many arguments"+e,o.errors.UNEXPECTED_ARGUMENT,{count:r,expectedCount:t})}checkNew(r,t){(r===Object||r==null)&&this.throwError("missing new",o.errors.MISSING_NEW,{name:t.name})}checkAbstract(r,t){r===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",o.errors.UNSUPPORTED_OPERATION,{name:r.name,operation:"new"}):(r===Object||r==null)&&this.throwError("missing new",o.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return E||(E=new o(y)),E}static setCensorship(r,t){if(!r&&t&&this.globalLogger().throwError("cannot permanently disable censorship",o.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),R){if(!r)return;this.globalLogger().throwError("error censorship permanent",o.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}T=!!r,R=!!t}static setLogLevel(r,t){let e=m[t.toLowerCase()];if(e==null){o.globalLogger().warn("invalid log level - "+t);return}N[r]=e}static from(r){return new o(r)}},u=o;u.errors=I,u.levels=A;import{ASSOCIATED_TOKEN_PROGRAM_ID as $,TOKEN_PROGRAM_ID as J}from"@solana/spl-token";import{SYSVAR_CLOCK_PUBKEY as V,SYSVAR_RENT_PUBKEY as q}from"@solana/web3.js";var B=u.from("common/pubkey"),C=U.programId,v=new x("Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo");import{PublicKey as tr}from"@solana/web3.js";import nr from"bn.js";import{PACKET_DATA_SIZE as pr,PublicKey as gr,Transaction as Er}from"@solana/web3.js";var dr=u.from("common/web3");var p=u.from("token/util"),P=class{constructor(r){this.tokenList=r;this.filterByMint=r=>this.tokenList.filter(t=>t.mint===r);this.filterUniqueByMint=(r,t="all")=>{let e=this.tokenList.filter(l=>l.mint===r);if(e.length===0)return p.throwArgumentError("No token found","mint",r);if(e.length>1)return p.throwArgumentError(`Multiple tokens found: ${e.length}`,"mint",r);let n=e[0];return t==="spl"&&"version"in n?p.throwArgumentError("invalid SPL token mint","mint",r):t==="lp"&&!("version"in n)?p.throwArgumentError("invalid LP token mint","mint",r):n};this.getList=()=>this.tokenList}};export{P as TokenList};
//# sourceMappingURL=util.mjs.map