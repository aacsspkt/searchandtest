import { FarmStateLayout, FarmLedgerLayout, FarmState, FarmLedger } from './layout.js';
import { FarmPoolJsonInfo, FarmVersion } from './type.js';
import { PublicKey, Connection, TransactionInstruction } from '@solana/web3.js';
import bn_js__default from 'bn.js';
import { PublicKeyish } from '../common/pubkey.js';
import { GetMultipleAccountsInfoConfig } from '../common/web3.js';
import { BigNumberish } from '../entity/bignumber.js';
import { SplAccount } from '../spl/layout.js';
import '../marshmallow/index.js';
import '../marshmallow/buffer-layout.js';
import '../common/json-file.js';
import '../type-b5eab5c3.js';
import '@solana/spl-token';

declare type FarmPoolKeys = {
    [T in keyof FarmPoolJsonInfo]: FarmPoolJsonInfo[T] extends string ? PublicKey : FarmPoolJsonInfo[T] extends string[] ? PublicKey[] : FarmPoolJsonInfo[T];
};
/**
 * Full user keys that build transaction need
 */
interface FarmUserKeys {
    ledger: PublicKey;
    auxiliaryLedgers?: PublicKey[];
    lpTokenAccount: PublicKey;
    rewardTokenAccounts: PublicKey[];
    owner: PublicKey;
}
interface FarmDepositInstructionParams {
    poolKeys: FarmPoolKeys;
    userKeys: FarmUserKeys;
    amount: BigNumberish;
}
declare type FarmWithdrawInstructionParams = FarmDepositInstructionParams;
interface FarmCreateAssociatedLedgerAccountInstructionParams {
    poolKeys: FarmPoolKeys;
    userKeys: {
        ledger: PublicKey;
        owner: PublicKey;
    };
}
interface FarmFetchMultipleInfoParams {
    connection: Connection;
    pools: FarmPoolKeys[];
    owner?: PublicKey;
    config?: GetMultipleAccountsInfoConfig;
}
declare class Farm {
    static getProgramId(version: number): PublicKey;
    static getVersion(programId: PublicKeyish): FarmVersion;
    static getStateLayout(version: number): FarmStateLayout;
    static getLedgerLayout(version: number): FarmLedgerLayout;
    static getLayouts(version: number): {
        state: FarmStateLayout;
        ledger: FarmLedgerLayout;
    };
    static getAssociatedAuthority({ programId, poolId }: {
        programId: PublicKey;
        poolId: PublicKey;
    }): Promise<{
        publicKey: PublicKey;
        nonce: number;
    }>;
    static getAssociatedLedgerAccount({ programId, poolId, owner, }: {
        programId: PublicKey;
        poolId: PublicKey;
        owner: PublicKey;
    }): Promise<PublicKey>;
    static makeDepositInstruction(params: FarmDepositInstructionParams): TransactionInstruction;
    static makeDepositInstructionV3({ poolKeys, userKeys, amount }: FarmDepositInstructionParams): TransactionInstruction;
    static makeDepositInstructionV5({ poolKeys, userKeys, amount }: FarmDepositInstructionParams): TransactionInstruction;
    static makeWithdrawInstruction(params: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeWithdrawInstructionV3({ poolKeys, userKeys, amount }: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeWithdrawInstructionV5({ poolKeys, userKeys, amount }: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstruction(params: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstructionV3({ poolKeys, userKeys, }: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstructionV5({ poolKeys, userKeys, }: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static fetchMultipleInfo({ connection, pools, owner, config }: FarmFetchMultipleInfoParams): Promise<{
        [id: string]: {
            state: FarmState;
            lpVault: SplAccount;
            ledger?: FarmLedger | undefined;
            wrapped?: {
                pendingRewards: bn_js__default[];
            } | undefined;
        };
    }>;
}

export { Farm, FarmCreateAssociatedLedgerAccountInstructionParams, FarmDepositInstructionParams, FarmFetchMultipleInfoParams, FarmPoolKeys, FarmUserKeys, FarmWithdrawInstructionParams };
